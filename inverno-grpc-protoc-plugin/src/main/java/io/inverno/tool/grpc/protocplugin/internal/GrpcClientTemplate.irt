package io.inverno.tool.grpc.protocplugin.internal;

import static io.inverno.tool.grpc.protocplugin.internal.GenericInvernoGrpcGenerator.javadoc;

include io.inverno.tool.grpc.protocplugin.internal.GrpcClientTemplateHttp;
include io.inverno.tool.grpc.protocplugin.internal.GrpcClientTemplateWeb;

option modes = {"STRING"};
option charset = "utf-8";

(InvernoGrpcMetadata.ServiceMetadata service) -> {{@if (service.getJavaPackageName().isPresent()) -> {package {@(service.getJavaPackageName().get())};
}}
import io.inverno.mod.discovery.ServiceID;
import io.inverno.mod.grpc.base.GrpcOutboundRequestMetadata;
import io.inverno.mod.grpc.base.GrpcServiceName;
import io.inverno.mod.grpc.client.GrpcClient;
import io.inverno.mod.grpc.client.GrpcExchange;
import io.inverno.mod.grpc.client.GrpcResponse;
import io.inverno.mod.http.base.ExchangeContext;
import io.inverno.mod.http.client.Endpoint;
import io.inverno.mod.http.client.HttpClient;
import io.inverno.mod.web.client.WebClient;
import java.net.InetSocketAddress;
import java.util.function.Consumer;
{@if (service.isImportPublisher()) -> {import org.reactivestreams.Publisher;
}}import reactor.core.publisher.Mono;

/**
 * {@(service.getServiceComment().orElse(""))|javadoc(0)}
 */
{@if (service.isDeprecated()) -> {@Deprecated
}}
public final class {@service.javaServiceName}GrpcClient \{

	public static final GrpcServiceName SERVICE_NAME = GrpcServiceName.of({@(service.getPackageName().map(s -> "\"" + s + "\"").orElse(null))}, "{@service.serviceName}");

	private {@service.javaServiceName}GrpcClient() \{\}

    {service;http}

    {service;web}
\}
}