package io.inverno.tool.grpc.protocplugin.internal;

import static io.inverno.tool.grpc.protocplugin.internal.GenericInvernoGrpcGenerator.javadoc;

option modes = {"STRING"};
option charset = "utf-8";

http(InvernoGrpcMetadata.ServiceMetadata service) -> {public static abstract class Http \{

		private final HttpClient httpClient;
		private final GrpcClient grpcClient;

		public Http(HttpClient httpClient, GrpcClient grpcClient) \{
			this.httpClient = httpClient;
			this.grpcClient = grpcClient;
		\}

		public <A extends ExchangeContext> {@service.javaServiceName}GrpcClient.HttpClientStub<A> createStub(String host, int port) \{
			return new {@service.javaServiceName}GrpcClient.Http.StubImpl<>(this.httpClient.<A>endpoint(host, port).build(), true);
		\}

		public <A extends ExchangeContext> {@service.javaServiceName}GrpcClient.HttpClientStub<A> createStub(InetSocketAddress remoteAddress) \{
			return new {@service.javaServiceName}GrpcClient.Http.StubImpl<>(this.httpClient.<A>endpoint(remoteAddress).build(), true);
		\}

		public <A extends ExchangeContext> {@service.javaServiceName}GrpcClient.HttpClientStub<A> createStub(Endpoint<A> endpoint) \{
			return new {@service.javaServiceName}GrpcClient.Http.StubImpl<>(endpoint, false);
		\}

		private final class StubImpl<A extends ExchangeContext> implements {@service.javaServiceName}GrpcClient.HttpClientStub<A> \{

			private final Endpoint<A> endpoint;
			private final boolean shutdownEndpoint;
			private final Consumer<GrpcOutboundRequestMetadata> metadataConfigurer;

			public StubImpl(Endpoint<A> endpoint, boolean shutdownEndpoint) \{
				this.endpoint = endpoint;
				this.shutdownEndpoint = shutdownEndpoint;
				this.metadataConfigurer = null;
			\}

			private StubImpl({@service.javaServiceName}GrpcClient.Http.StubImpl<A> parent, Consumer<GrpcOutboundRequestMetadata> metadataConfigurer) \{
				this.endpoint = parent.endpoint;
				this.shutdownEndpoint = false;
				this.metadataConfigurer = metadataConfigurer;
			\}

			@Override
			public {@service.javaServiceName}GrpcClient.HttpClientStub<A> withMetadata(Consumer<GrpcOutboundRequestMetadata> metadataConfigurer) \{
				return new {@service.javaServiceName}GrpcClient.Http.StubImpl<>(this, metadataConfigurer);
			\}

			@Override
			public Mono<Void> shutdown() \{
				return this.shutdownEndpoint ? this.endpoint.shutdown() : Mono.empty();
			\}

			@Override
			public Mono<Void> shutdownGracefully() \{
				return this.shutdownEndpoint ? this.endpoint.shutdownGracefully() : Mono.empty();
			\}
			{service.methods;
				(method) -> http_unary_impl when (method.isUnary());
				http_client_streaming_impl when (method.isClientStreaming());
				http_server_streaming_impl when (method.isServerStreaming());
				http_bidirectional_streaming_impl
			}
		\}
	\}

	/**
	 * {@(service.getServiceComment().orElse(""))|javadoc(1)}
	 *
	 * @param <A> the exchange context type
	 */
	public interface HttpClientStub<A extends ExchangeContext> extends GrpcClient.CloseableStub<A, {@service.javaServiceName}GrpcClient.HttpClientStub<A>> \{
		{service.methods;
			(method) -> http_unary when (method.isUnary());
			http_client_streaming when (method.isClientStreaming());
			http_server_streaming when (method.isServerStreaming());
			http_bidirectional_streaming
		}
	\}}

http_unary(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @return a mono emitting the unary exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<GrpcExchange.Unary<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}() \{
			return this.{@method.javaMethodName}((A)null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param context the context
		 * 
		 * @return a mono emitting the unary exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}Mono<GrpcExchange.Unary<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context);

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request
		 * 
		 * @return the server response
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<{@method.javaResponseType}> {@method.javaMethodName}({@method.javaRequestType} request) \{
			return this.{@method.javaMethodName}(request, null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request
		 * @param context the context
		 * 
		 * @return the server response
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<{@method.javaResponseType}> {@method.javaMethodName}({@method.javaRequestType} request, A context) \{
			return this.{@method.javaMethodName}(context)
				.flatMap(grpcExchange -> \{
					grpcExchange.request().value(request);
					return grpcExchange.response().flatMap(GrpcResponse.Unary::value);
				\});
		\}}

http_unary_impl(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
			@Override
			{@if (method.isDeprecated()) -> {@Deprecated
			}}public Mono<GrpcExchange.Unary<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context) \{
				return this.endpoint.exchange(context)
					.map(exchange -> \{
						GrpcExchange.Unary<A, {@method.javaRequestType}, {@method.javaResponseType}> grpcExchange = {@method.javaServiceName}GrpcClient.Http.this.grpcClient.unary(exchange, SERVICE_NAME, "{@method.methodName}", {@method.javaRequestType}.getDefaultInstance(), {@method.javaResponseType}.getDefaultInstance());
						grpcExchange.request().metadata(this.metadataConfigurer);
						return grpcExchange;
					\});
			\}}

http_client_streaming(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @return a mono emitting the client streaming exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<GrpcExchange.ClientStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}() \{
			return this.{@method.javaMethodName}((A)null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param context the context
		 * 
		 * @return a mono emitting the client streaming exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}Mono<GrpcExchange.ClientStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context);

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request publisher
		 * 
		 * @return the server response
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<{@method.javaResponseType}> {@method.javaMethodName}(Publisher<{@method.javaRequestType}> request) \{
			return this.{@method.javaMethodName}(request, null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request publisher
		 * @param context the context
		 * 
		 * @return the server response
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<{@method.javaResponseType}> {@method.javaMethodName}(Publisher<{@method.javaRequestType}> request, A context) \{
			return this.{@method.javaMethodName}(context)
				.flatMap(grpcExchange -> \{
					grpcExchange.request().stream(request);
					return grpcExchange.response().flatMap(GrpcResponse.Unary::value);
				\});
		\}}

http_client_streaming_impl(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
			@Override
			{@if (method.isDeprecated()) -> {@Deprecated
			}}public Mono<GrpcExchange.ClientStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context) \{
				return this.endpoint.exchange(context)
					.map(exchange -> \{
						GrpcExchange.ClientStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}> grpcExchange = {@method.javaServiceName}GrpcClient.Http.this.grpcClient.clientStreaming(exchange, SERVICE_NAME, "{@method.methodName}", {@method.javaRequestType}.getDefaultInstance(), {@method.javaResponseType}.getDefaultInstance());
						grpcExchange.request().metadata(this.metadataConfigurer);
						return grpcExchange;
					\});
			\}}

http_server_streaming(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @return a mono emitting the server streaming exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<GrpcExchange.ServerStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}() \{
			return this.{@method.javaMethodName}((A)null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param context the context
		 * 
		 * @return a mono emitting the server streaming exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}Mono<GrpcExchange.ServerStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context);

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request
		 * 
		 * @return the server response publisher
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Publisher<{@method.javaResponseType}> {@method.javaMethodName}({@method.javaRequestType} request) \{
			return this.{@method.javaMethodName}(request, null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request
		 * @param context the context
		 * 
		 * @return the server response publisher
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Publisher<{@method.javaResponseType}> {@method.javaMethodName}({@method.javaRequestType} request, A context) \{
			return this.{@method.javaMethodName}(context)
				.flatMapMany(grpcExchange -> \{
					grpcExchange.request().value(request);
					return grpcExchange.response().flatMapMany(GrpcResponse.Streaming::stream);
				\});
		\}}

http_server_streaming_impl(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
			@Override
			{@if (method.isDeprecated()) -> {@Deprecated
			}}public Mono<GrpcExchange.ServerStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context) \{
				return this.endpoint.exchange(context)
					.map(exchange -> \{
						GrpcExchange.ServerStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}> grpcExchange = {@method.javaServiceName}GrpcClient.Http.this.grpcClient.serverStreaming(exchange, SERVICE_NAME, "{@method.methodName}", {@method.javaRequestType}.getDefaultInstance(), {@method.javaResponseType}.getDefaultInstance());
						grpcExchange.request().metadata(this.metadataConfigurer);
						return grpcExchange;
					\});
			\}}

http_bidirectional_streaming(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @return a mono emitting the bidirectional streaming exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Mono<GrpcExchange.BidirectionalStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}() \{
			return this.{@method.javaMethodName}((A)null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param context the context
		 * 
		 * @return a mono emitting the bidirectional streaming exchange
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}Mono<GrpcExchange.BidirectionalStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context);

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request publisher
		 * 
		 * @return the server response publisher
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Publisher<{@method.javaResponseType}> {@method.javaMethodName}(Publisher<{@method.javaRequestType}> request) \{
			return this.{@method.javaMethodName}(request, null);
		\}

		/**
		 * {@(method.getMethodComment().orElse(""))|javadoc(2)}
		 * 
		 * @param request the client request publisher
		 * @param context the context
		 * 
		 * @return the server response publisher
		 */
		{@if (method.isDeprecated()) -> {@Deprecated
		}}default Publisher<{@method.javaResponseType}> {@method.javaMethodName}(Publisher<{@method.javaRequestType}> request, A context) \{
			return this.{@method.javaMethodName}(context)
				.flatMapMany(grpcExchange -> \{
					grpcExchange.request().stream(request);
					return grpcExchange.response().flatMapMany(GrpcResponse.Streaming::stream);
				\});
		\}}

http_bidirectional_streaming_impl(InvernoGrpcMetadata.ServiceMetadata.MethodMetadata method) -> {
			@Override
			{@if (method.isDeprecated()) -> {@Deprecated
			}}public Mono<GrpcExchange.BidirectionalStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}>> {@method.javaMethodName}(A context) \{
				return this.endpoint.exchange(context)
					.map(exchange -> \{
						GrpcExchange.BidirectionalStreaming<A, {@method.javaRequestType}, {@method.javaResponseType}> grpcExchange = {@method.javaServiceName}GrpcClient.Http.this.grpcClient.bidirectionalStreaming(exchange, SERVICE_NAME, "{@method.methodName}", {@method.javaRequestType}.getDefaultInstance(), {@method.javaResponseType}.getDefaultInstance());
						grpcExchange.request().metadata(this.metadataConfigurer);
						return grpcExchange;
					\});
			\}}